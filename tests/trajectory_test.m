%% Unit tests for the `trajectory` function
%
%   The tests are relatively basic in nature in that it only just checks
%   the apogee to see if it is within reasonable bounds of what it is
%   somewhat expected to be. Essentially it is just an automated way to
%   check if new changes gives an completely unreasonable trajectory
%   instead of checking if the computed trajectory is super accurate.
function tests = trajectory_test
    tests = functiontests(localfunctions);
end

function test_8km_target(testCase)
    TARGET_ALT = 8000;
    ACCEPTABLE_ERR = 200;
    
    load_mass = 300;
    fuselage_dia = 0.2;
    fuselage_length = 5;
    nose_length = 0.4;
    num_of_fins = 4;
    fin_span = 0.3;
    fin_thickness = 0.01;
    fin_leading_edge_sweep_angle = 20;
    fin_leading_edge_thickness_angle = 15;
    burn_time = 30;
    prop_flow_rate = 5;
    nozzle_eff = 0.7;
    c_star = 1000;
    exit_pressure = 40000;
    chamber_pressure = 600000;
    exp_area_ratio = 2;
    nozzle_exit_area = 0.01;
    ballute_alt = 8000;
    main_chute_alt = 2000;
    ballute_drag_coeff = 0.75;
    main_chute_drag_coeff = 0.53;
    ballute_dia = 1;
    main_chute_dia = 4.13;
    number_of_ballutes = 3;
    number_of_chutes = 3;
    chute_attachment_pos = 4.5;
    launch_angle = 88;
    launch_alt = 1401;
    thrust_uncertainty = sampling.create_uncertainty(0,0);
    CG_uncertainty = sampling.create_uncertainty(0,0);
    CP_uncertainty = sampling.create_uncertainty(0,0);
    CD_uncertainty = sampling.create_uncertainty(0,0);

    vehicle = create_rocket(...
        load_mass, ...
        fuselage_dia, ...
        fuselage_length, ...
        nose_length, ...
        num_of_fins, ...
        fin_span, ...
        fin_thickness, ...
        fin_leading_edge_sweep_angle, ...
        fin_leading_edge_thickness_angle, ...
        burn_time, ...
        prop_flow_rate, ...
        nozzle_eff, ...
        c_star, ...
        exit_pressure, ...
        chamber_pressure, ...
        exp_area_ratio, ...
        nozzle_exit_area, ...
        ballute_alt, ...
        main_chute_alt, ...
        ballute_drag_coeff, ...
        main_chute_drag_coeff, ...
        ballute_dia, ...
        main_chute_dia, ...
        number_of_ballutes, ...
        number_of_chutes, ...
        chute_attachment_pos, ...
        launch_angle, ...
        launch_alt, ...
        thrust_uncertainty, ...
        CG_uncertainty, ...
        CP_uncertainty, ...
        CD_uncertainty);

    [time, state] = trajectory(vehicle);
    [apogee, ~] = find_apogee(time, state(:,3));
    verifyEqual(testCase, apogee, TARGET_ALT, 'AbsTol', ACCEPTABLE_ERR);
end

function test_23km_target(testCase)
    TARGET_ALT = 23000;
    ACCEPTABLE_ERR = 200; % a bit high and maybe can be tone down a bit.

    load_mass = 320;
    fuselage_dia = 0.3;
    fuselage_length = 6;
    nose_length = 0.6;
    num_of_fins = 4;
    fin_span = 0.4;
    fin_thickness = 0.01;
    fin_leading_edge_sweep_angle = 3;
    fin_leading_edge_thickness_angle = 15;
    burn_time = 30;
    prop_flow_rate = 5.6;
    nozzle_eff = 0.9;
    c_star = 1500;
    exit_pressure = 20000;
    chamber_pressure = 1000000;
    exp_area_ratio = 2.5;
    nozzle_exit_area = 0.02;
    ballute_alt = 75000;
    main_chute_alt = 3000;
    ballute_drag_coeff = 0.75;
    main_chute_drag_coeff = 0.53;
    ballute_dia = 1;
    main_chute_dia = 4.13;
    number_of_ballutes = 3;
    number_of_chutes = 3;
    chute_attachment_pos = 3.6;
    launch_angle = 87;
    launch_alt = 1401;
    thrust_uncertainty = sampling.create_uncertainty(0,0);
    CG_uncertainty = sampling.create_uncertainty(0,0);
    CP_uncertainty = sampling.create_uncertainty(0,0);
    CD_uncertainty = sampling.create_uncertainty(0,0);

    vehicle = create_rocket(...
        load_mass, ...
        fuselage_dia, ...
        fuselage_length, ...
        nose_length, ...
        num_of_fins, ...
        fin_span, ...
        fin_thickness, ...
        fin_leading_edge_sweep_angle, ...
        fin_leading_edge_thickness_angle, ...
        burn_time, ...
        prop_flow_rate, ...
        nozzle_eff, ...
        c_star, ...
        exit_pressure, ...
        chamber_pressure, ...
        exp_area_ratio, ...
        nozzle_exit_area, ...
        ballute_alt, ...
        main_chute_alt, ...
        ballute_drag_coeff, ...
        main_chute_drag_coeff, ...
        ballute_dia, ...
        main_chute_dia, ...
        number_of_ballutes, ...
        number_of_chutes, ...
        chute_attachment_pos, ...
        launch_angle, ...
        launch_alt, ...
        thrust_uncertainty, ...
        CG_uncertainty, ...
        CP_uncertainty, ...
        CD_uncertainty);

    [time, state] = trajectory(vehicle);
    [apogee, ~] = find_apogee(time, state(:,3));
    verifyEqual(testCase, apogee, TARGET_ALT, 'AbsTol', ACCEPTABLE_ERR);
end

